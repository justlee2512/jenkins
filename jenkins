pipeline {
    agent any

    tools {
        maven 'Maven'  // Tên đã cấu hình trong Global Tool Configuration
        jdk 'JDK'      // Nếu không có, bạn có thể bỏ dòng này
    }

    environment {
        NEXUS_URL = '192.168.2.83:8081'  // URL của Nexus server
        NEXUS_CREDENTIALS = 'Nexus'     // ID của Jenkins credentials (username/password)
        REPO_NAME = 'maven-releases'    // Tên repository trong Nexus
        GROUP_ID = 'com.blackhat'
        ARTIFACT_ID = 'heart-animation'
        VERSION = '0.0.1'
        FILE_NAME = "target/heart-animation-0.0.1.war"
        SONAR_HOST_URL = 'http://192.168.2.83:9000/' // URL của SonarQube server
        SONAR_TOKEN = credentials('SonarQube') // Dùng Jenkins credentials để lưu token an toàn
        SONAR_PROJECT_KEY = 'heart'     // Tên project trong SonarQube
        DOCKER_IMAGE = 'heart-animation:1.0'
        DOCKER_REGISTRY = '192.168.2.83:5000/docker' // URL của Nexus Docker Registry
    }

    stages {
        stage('Checkout Code') {
            steps {
                git credentialsId: 'Github', url: 'https://github.com/justlee2512/Heart.git', branch: 'master'
            }
        }

        stage('Build with Maven') {
            steps {
                sh 'mvn clean install'
                stash includes: 'target/heart-animation-0.0.1.war', name: 'war-file'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQube') { // 'SonarQube' là tên server cấu hình trong Jenkins
                    sh 'mvn sonar:sonar ' +
                       '-Dsonar.projectKey=${SONAR_PROJECT_KEY} ' +
                       '-Dsonar.host.url=${SONAR_HOST_URL} ' +
                       '-Dsonar.login=${SONAR_TOKEN}'
                }
            }
        }

        stage('Deploy WAR to Nexus') {
            steps {
                sh "ls -la target"

                nexusArtifactUploader(
                    nexusVersion: 'nexus3',
                    protocol: 'http',
                    nexusUrl: "${NEXUS_URL}",
                    groupId: "${GROUP_ID}",
                    version: "${VERSION}",
                    repository: "${REPO_NAME}",
                    credentialsId: "${NEXUS_CREDENTIALS}",
                    artifacts: [
                        [
                            artifactId: "${ARTIFACT_ID}",
                            classifier: '',
                            file: "${FILE_NAME}",
                            type: 'war'
                        ]
                    ]
                )
            }
        }

        stage('Build Docker Image on Jenkins Agent') {
            agent {
                label 'docker-builder' // Label của Jenkins agent có Docker
            }
            steps {
                unstash 'war-file' // Lấy file WAR từ master
                writeFile file: 'Dockerfile', text: """
                FROM tomcat:9.0
                COPY target/heart-animation-0.0.1.war /usr/local/tomcat/webapps/
                EXPOSE 8080
                CMD ["catalina.sh", "run"]
                """
                sh """
                docker build -t ${DOCKER_IMAGE} .
                docker tag ${DOCKER_IMAGE} ${DOCKER_REGISTRY}/${DOCKER_IMAGE}
                """
            }
        }

        stage('Push Docker Image to Nexus') {
            agent {
                label 'docker-builder' // Label của Jenkins agent có Docker
            }
            steps {
                withCredentials([usernamePassword(credentialsId: "${NEXUS_CREDENTIALS}", usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh """
                    docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD} ${DOCKER_REGISTRY}
                    docker tag ${DOCKER_IMAGE} ${DOCKER_REGISTRY}/${DOCKER_IMAGE}
                    docker push ${DOCKER_REGISTRY}/${DOCKER_IMAGE}
                    docker logout ${DOCKER_REGISTRY}
                    """
                }
            }
        }

        stage('Generate Deployment File') {
            steps {
                writeFile file: 'deployment.yaml', text: """
                apiVersion: apps/v1
                kind: Deployment
                metadata:
                  name: heart-animation
                  namespace: default
                spec:
                  replicas: 1
                  selector:
                    matchLabels:
                      app: heart-animation
                  template:
                    metadata:
                      labels:
                        app: heart-animation
                    spec:
                      containers:
                      - name: heart-animation
                        image: ${DOCKER_REGISTRY}/${DOCKER_IMAGE}
                        ports:
                        - containerPort: 8080
                ---
                apiVersion: v1
                kind: Service
                metadata:
                  name: heart-animation-service
                  namespace: default
                spec:
                  selector:
                    app: heart-animation
                  ports:
                  - protocol: TCP
                    port: 8080
                    targetPort: 8080
                  type: LoadBalancer
                ---
                apiVersion: networking.k8s.io/v1
                kind: Ingress
                metadata:
                  name: heart-animation-ingress
                  namespace: default
                  annotations:
                    nginx.ingress.kubernetes.io/rewrite-target: /
                    nginx.ingress.kubernetes.io/ssl-redirect: "true"
                    cert-manager.io/cluster-issuer: "letsencrypt-prod"
                spec:
                  tls:
                  - hosts:
                    - heart.blackhat
                    secretName: heart-blackhat-tls
                  rules:
                  - host: heart.blackhat
                    http:
                      paths:
                      - path: /
                        pathType: Prefix
                        backend:
                          service:
                            name: heart-animation-service
                            port:
                              number: 8080
                """
            }
        }

        stage('Deploy to Kubernetes') {
            agent {
                label 'docker-builder' // Sử dụng agent docker-builder
            }

            steps {
                withKubeConfig([credentialsId: 'k8s']) { // Lấy kubeconfig từ Jenkins credentials
                    script {
                        // Chạy container bitnami/kubectl:latest trên agent docker-builder
                        sh """
                        docker run --rm \
                            -v \$KUBECONFIG:/root/.kube/config \  // Mount kubeconfig từ môi trường
                            -v \$PWD:/workspace \                 // Mount workspace hiện tại
                            -w /workspace \                      // Set working directory
                            bitnami/kubectl:latest \
                            sh -c "kubectl apply -f deployment.yaml"
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                node('docker-builder') {
                    if (sh(script: 'command -v docker', returnStatus: true) == 0) {
                        echo 'Cleaning up Docker images...'
                        sh """
                        docker image prune -f || true
                        docker rmi -f ${DOCKER_IMAGE} || true
                        docker rmi -f ${DOCKER_REGISTRY}/${DOCKER_IMAGE} || true
                        """
                    } else {
                        echo 'Docker not found, skipping cleanup.'
                    }
                }
            }
        }
        success {
            echo 'Pipeline completed successfully!'
            echo 'Docker image uploaded to Nexus successfully!'
        }
        failure {
            echo 'Pipeline failed!'
            echo 'Failed to upload Docker image to Nexus.'
        }
    }
}
