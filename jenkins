pipeline {
    agent any

    tools {
        maven 'Maven'  // Tên đã cấu hình trong Global Tool Configuration
        jdk 'JDK'      // Nếu không có, bạn có thể bỏ dòng này
    }

    environment {
        NEXUS_URL = '192.168.2.83:8081'  // URL của Nexus server
        NEXUS_CREDENTIALS = 'Nexus'     // ID của Jenkins credentials (username/password)
        REPO_NAME = 'maven-releases'    // Tên repository trong Nexus
        SONAR_HOST_URL = 'http://192.168.2.83:9000/' // URL của SonarQube server
        SONAR_TOKEN = credentials('SonarQube') // Dùng Jenkins credentials để lưu token an toàn
        SONAR_PROJECT_KEY = 'heart'     // Tên project trong SonarQube
        DOCKER_REGISTRY = '192.168.2.83:5000/docker' // URL của Nexus Docker Registry
    }

    stages {
        stage('Checkout Code') {
            steps {
                git credentialsId: 'Github', url: 'https://github.com/justlee2512/Heart.git', branch: 'master'
            }
        }

        stage('Read POM Information') {
            steps {
                script {
                    def pom = readMavenPom file: 'pom.xml'
                    env.GROUP_ID = pom.groupId
                    env.ARTIFACT_ID = pom.artifactId
                    env.VERSION = pom.version
                    env.FILE_NAME = "target/${pom.artifactId}-${pom.version}.war"
                    env.DOCKER_IMAGE = "${pom.artifactId}:${pom.version}"
                    env.K8S_NAMESPACE = "${pom.artifactId}"
                }
                echo "GROUP_ID: ${env.GROUP_ID}"
                echo "ARTIFACT_ID: ${env.ARTIFACT_ID}"
                echo "VERSION: ${env.VERSION}"
                echo "FILE_NAME: ${env.FILE_NAME}"
                echo "DOCKER_IMAGE: ${env.DOCKER_IMAGE}"
                echo "K8S_NAMESPACE: ${env.K8S_NAMESPACE}"
            }
        }

        stage('Build with Maven') {
            steps {
                sh 'mvn clean install'
                sh 'ls -la target' // List files in the target directory
                stash includes: "${env.FILE_NAME}", name: 'war-file'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQube') { // 'SonarQube' là tên server cấu hình trong Jenkins
                    sh 'mvn sonar:sonar ' +
                       '-Dsonar.projectKey=${SONAR_PROJECT_KEY} ' +
                       '-Dsonar.host.url=${SONAR_HOST_URL} ' +
                       '-Dsonar.login=${SONAR_TOKEN}'
                }
            }
        }

        stage('Deploy WAR to Nexus') {
            steps {
                sh "ls -la target"

                nexusArtifactUploader(
                    nexusVersion: 'nexus3',
                    protocol: 'http',
                    nexusUrl: "${NEXUS_URL}",
                    groupId: "${GROUP_ID}",
                    version: "${VERSION}",
                    repository: "${REPO_NAME}",
                    credentialsId: "${NEXUS_CREDENTIALS}",
                    artifacts: [
                        [
                            artifactId: "${ARTIFACT_ID}",
                            classifier: '',
                            file: "${FILE_NAME}",
                            type: 'war'
                        ]
                    ]
                )
            }
        }

        stage('Build Docker Image on Jenkins Agent') {
            agent {
                label 'docker-builder' // Label của Jenkins agent có Docker
            }
            steps {
                unstash 'war-file' // Lấy file WAR từ master
                writeFile file: 'Dockerfile', text: """
                FROM tomcat:10.1-jdk17
                COPY target/${ARTIFACT_ID}-${VERSION}.war /usr/local/tomcat/webapps/
                EXPOSE 8080
                CMD ["catalina.sh", "run"]
                """
                sh """
                docker rm -f heart-container || true
                docker image prune -f 
                docker ps -a 
                docker images 
                docker build -t ${DOCKER_IMAGE} .
                docker tag ${DOCKER_IMAGE} ${DOCKER_REGISTRY}/${DOCKER_IMAGE}
                """
            }
        }

        stage('Delete Old Docker Image') {
            agent {
                label 'docker-builder' // Label của Jenkins agent có Docker
            }
            steps {
                withCredentials([usernamePassword(credentialsId: "${NEXUS_CREDENTIALS}", usernameVariable: 'NEXUS_USERNAME', passwordVariable: 'NEXUS_PASSWORD')]) {
                    script {
                        def nexusApiUrl = "http://${NEXUS_URL}/service/rest/v1/components?repository=${REPO_NAME}"
                        def deleteImages = sh(
                            script: """
                            curl -u ${NEXUS_USERNAME}:${NEXUS_PASSWORD} -X GET "${nexusApiUrl}" | \
                            python3 -c "import sys, json; [print(item['id']) for item in json.load(sys.stdin)['items'] if item['name'] == '${ARTIFACT_ID}']" | \
                            xargs -I {} curl -u ${NEXUS_USERNAME}:${NEXUS_PASSWORD} -X DELETE "${nexusApiUrl}/{}"
                            """,
                            returnStatus: true
                        )
                        if (deleteImages != 0) {
                            echo "No old Docker images found or failed to delete."
                        } else {
                            echo "Old Docker images deleted successfully from Nexus."
                        }
                    }
                }
            }
        }

        stage('Push Docker Image to Nexus') {
            agent {
                label 'docker-builder' // Label của Jenkins agent có Docker
            }
            steps {
                withCredentials([usernamePassword(credentialsId: "${NEXUS_CREDENTIALS}", usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh """
                    docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD} ${DOCKER_REGISTRY}
                    docker tag ${DOCKER_IMAGE} ${DOCKER_REGISTRY}/${DOCKER_IMAGE}
                    docker push ${DOCKER_REGISTRY}/${DOCKER_IMAGE}
                    docker image prune -f 
                    docker images 
                    docker logout ${DOCKER_REGISTRY}
                    """
                }
            }
        }

        stage('Pull and Run Docker Image') {
            agent {
                label 'docker-builder' // Label của Jenkins agent có Docker
            }
            steps {
                withCredentials([usernamePassword(credentialsId: "${NEXUS_CREDENTIALS}", usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh """
                    docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD} ${DOCKER_REGISTRY}
                    docker pull ${DOCKER_REGISTRY}/${DOCKER_IMAGE}
                    docker run -d --name heart-container -p 8080:8080 ${DOCKER_REGISTRY}/${DOCKER_IMAGE}
                    docker logout ${DOCKER_REGISTRY}
                    """
                }
            }
        }

        stage('Create Nexus Secret in Kubernetes') {
            agent {
                label 'docker-builder' // Label của Jenkins agent có Docker và kubectl
            }
            steps {
                withKubeConfig([credentialsId: 'k8s']) { // Sử dụng Jenkins credentials để lưu kubeconfig
                    withCredentials([usernamePassword(credentialsId: "${NEXUS_CREDENTIALS}", usernameVariable: 'NEXUS_USERNAME', passwordVariable: 'NEXUS_PASSWORD')]) {
                        sh """
                        kubectl create namespace ${K8S_NAMESPACE} || true
                        kubectl delete secrets nexus-docker-secret --namespace=${K8S_NAMESPACE} || true                        
                        kubectl create secret docker-registry nexus-docker-secret \
                            --docker-server=${DOCKER_REGISTRY} \
                            --docker-username=${NEXUS_USERNAME} \
                            --docker-password=${NEXUS_PASSWORD} \
                            --namespace=${K8S_NAMESPACE}
                        """
                    }
                }
            }
        }
        
        stage('Deploy Kubernetes Resources') {
            agent {
                label 'docker-builder' // Label of Jenkins agent with Docker and kubectl
            }
            steps {
                withKubeConfig([credentialsId: 'k8s']) {
                    withCredentials([usernamePassword(credentialsId: "${NEXUS_CREDENTIALS}", usernameVariable: 'NEXUS_USERNAME', passwordVariable: 'NEXUS_PASSWORD')]) {
                        sh """
                        cd /home/tuan/${ARTIFACT_ID}
                        kubectl delete -f deployment.yaml --namespace=${K8S_NAMESPACE} || true
                        kubectl delete -f service.yaml --namespace=${K8S_NAMESPACE} || true
                        kubectl delete -f ingress.yaml --namespace=${K8S_NAMESPACE} || true
                        rm -rf /home/tuan/${ARTIFACT_ID} || true
                        git clone https://github.com/justlee2512/kubernetes-deployment.git /home/tuan/${ARTIFACT_ID}
                        cd /home/tuan/${ARTIFACT_ID}
                        kubectl apply -f deployment.yaml
                        kubectl apply -f service.yaml
                        kubectl apply -f ingress.yaml
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                node('docker-builder') {
                    if (sh(script: 'command -v docker', returnStatus: true) == 0) {
                        echo 'Cleaning up Docker images...'
                        sh """
                        ls -la 
                        """
                    } else {
                        echo 'Docker not found, skipping cleanup.'
                    }
                }
            }
        }
        success {
            echo 'Pipeline completed successfully!'
            echo 'Docker image uploaded to Nexus successfully!'
        }
        failure {
            echo 'Pipeline failed!'
            echo 'Failed to upload Docker image to Nexus.'
        }
    }
}
