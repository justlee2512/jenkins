pipeline {
    agent any

    tools {
        maven 'Maven'  // Tên đã cấu hình trong Global Tool Configuration
        jdk 'JDK'      // Nếu không có, bạn có thể bỏ dòng này
    }

    environment {
        NEXUS_URL = '192.168.2.83:8081'  // URL của Nexus server
        NEXUS_CREDENTIALS = 'Nexus'     // ID của Jenkins credentials (username/password)
        REPO_NAME = 'maven-releases'    // Tên repository trong Nexus
        GROUP_ID = 'com.blackhat'
        ARTIFACT_ID = 'heart-animation'
        VERSION = '0.0.1'
        FILE_NAME = "target/heart-animation-0.0.1.war"
        SONAR_HOST_URL = 'http://192.168.2.83:9000/' // URL của SonarQube server
        SONAR_TOKEN = credentials('SonarQube') // Dùng Jenkins credentials để lưu token an toàn
        SONAR_PROJECT_KEY = 'heart'     // Tên project trong SonarQube
        DOCKER_IMAGE = 'heart-animation:1.0'
    }

    stages {
        stage('Checkout Code') {
            steps {
                git credentialsId: 'Github', url: 'https://github.com/justlee2512/Heart.git', branch: 'master'
            }
        }

        stage('Build with Maven') {
            steps {
                sh 'mvn clean install'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQube') { // 'SonarQube' là tên server cấu hình trong Jenkins
                    sh 'mvn sonar:sonar ' +
                       '-Dsonar.projectKey=${SONAR_PROJECT_KEY} ' +
                       '-Dsonar.host.url=${SONAR_HOST_URL} ' +
                       '-Dsonar.login=${SONAR_TOKEN}'
                }
            }
        }

        stage('Deploy to Nexus') {
            steps {
                sh "ls -la target"

                nexusArtifactUploader(
                    nexusVersion: 'nexus3',
                    protocol: 'http',
                    nexusUrl: "${NEXUS_URL}",
                    groupId: "${GROUP_ID}",
                    version: "${VERSION}",
                    repository: "${REPO_NAME}",
                    credentialsId: "${NEXUS_CREDENTIALS}",
                    artifacts: [
                        [
                            artifactId: "${ARTIFACT_ID}",
                            classifier: '',
                            file: "${FILE_NAME}",
                            type: 'war'
                        ]
                    ]
                )
            }
        }

        stage('Build Docker Image') {
            steps {
                writeFile file: 'Dockerfile', text: """
                FROM tomcat:9.0
                COPY ${FILE_NAME} /usr/local/tomcat/webapps/
                EXPOSE 8080
                CMD ["catalina.sh", "run"]
                """
                sh "docker build -t ${DOCKER_IMAGE} ."
            }
        }

        stage('Run Docker Container') {
            steps {
                sh "docker run -d -p 8080:8080 --name heart-animation ${DOCKER_IMAGE}"
            }
        }

        stage('Archive Artifacts') {
            steps {
                archiveArtifacts artifacts: '**/target/*.war', fingerprint: true
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
